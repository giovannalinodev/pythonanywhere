name: OWASP Dependency Check

on:
  # executar em qualquer branch
  push:
    branches: [ '*' ]  # Executa em todas as branches
  pull_request:
    branches: [ '*' ]  # Executa em PRs para todas as branches
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente (domingo à meia-noite)


jobs:
  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      # Instalar dependências do sistema para diagramas UML
      - name: Install system dependencies for UML diagrams
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz graphviz-dev pkg-config
      
      - name: Install project dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          
      # Gerar diagrama UML das classes de domínio diretamente
      - name: Generate UML Class Diagram
        run: |
          cd mysite
          python manage.py graph_models acervo enquetes \
            --output=../domain_class_diagram.png \
            --exclude-models=User \
            --group-models \
            --arrow-shape=normal \
            --layout=dot \
            --rankdir=TB \
            --theme=original
          echo "✅ Diagrama UML das classes de domínio gerado com sucesso!"
        continue-on-error: true
        
      - name: Upload UML diagram
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uml-class-diagram
          path: domain_class_diagram.png
          retention-days: 30
          
      # Usar Safety para verificação de dependências
      - name: Install safety
        run: pip install safety

      - name: Run Safety Check
        run: |
          export PYTHONIOENCODING=utf-8
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          safety check --file requirements.txt --output text || true
        continue-on-error: true
        
      - name: Generate safety report
        run: |
          export PYTHONIOENCODING=utf-8
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          safety check --file requirements.txt --output text > safety-report.txt 2>&1 || echo "Safety check completed with encoding issues" > safety-report.txt
          
      - name: Upload safety report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-report
          path: safety-report.txt
          retention-days: 7

      # Verificação de código deprecado
      - name: Check for deprecated code
        run: |
          # Falhar o pipeline se encontrar código deprecado
          pylint --disable=all --enable=deprecated-method,deprecated-argument,deprecated-class,deprecated-module,bad-builtin mysite/ || exit 1
          
      - name: Generate deprecated code report
        if: always()
        run: |
          # Gerar relatório mesmo se falhar
          pylint --disable=all --enable=deprecated-method,deprecated-argument,deprecated-class,deprecated-module,bad-builtin --output-format=text mysite/ > deprecated-code-report.txt || true
          
      - name: Upload deprecated code report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deprecated-code-report
          path: deprecated-code-report.txt
          retention-days: 7

      # Para executar pylint
      - name: Run pylint
        run: |
          pylint mysite/acervo/ --output=pylint-report.txt || true
          
      - name: Upload pylint report
        uses: actions/upload-artifact@v4
        with:
          name: pylint-report
          path: pylint-report.txt
          retention-days: 7

      # Detector de código duplicado
      - name: Install pylint for duplicate code detection
        run: pip install pylint

      - name: Detect duplicate code with pylint
        run: |
          pylint --disable=all --enable=duplicate-code --min-similarity-lines=5 mysite/acervo/ mysite/enquetes/ --output-format=text > duplicate-code-report.txt || true
        continue-on-error: true
          
      - name: Upload duplicate code report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: duplicate-code-report
          path: duplicate-code-report.txt
          retention-days: 7

      - name: Display duplicate code summary
        if: always()
        run: |
          if grep -q "Similar lines in" duplicate-code-report.txt; then
            echo "⚠️ Código duplicado encontrado. Verifique o relatório para detalhes."
            echo "📄 Relatório disponível nos artefatos do build."
          else
            echo "✅ Nenhum código duplicado encontrado."
          fi
          
      # Exibir resumo do diagrama UML gerado
      - name: Display UML diagram summary
        if: always()
        run: |
          if [ -f "domain_class_diagram.png" ]; then
            echo "🎨 ✅ Diagrama UML das classes de domínio gerado com sucesso!"
            echo "📊 Arquivo disponível nos artefatos: domain_class_diagram.png"
            echo "📏 Tamanho do arquivo: $(du -h domain_class_diagram.png | cut -f1)"
            ls -la domain_class_diagram.png
          else
            echo "⚠️ Diagrama UML não foi gerado. Verifique se:"
            echo "   - As dependências do Graphviz estão instaladas"
            echo "   - O django-extensions está configurado"
            echo "   - Os modelos existem nos apps acervo e enquetes"
          fi